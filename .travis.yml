sudo: false
language: cpp
cache:
 ccache: true
 directories:
    - /home/travis/toolchain

matrix:
  include:

  # Ubuntu, g++-8
  - os: linux
    dist: trusty
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
          - libboost1.55-all-dev
          - libssl-dev
          - g++-8
          - gcc-8
    env:
    - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - LABEL="linux"
    - _DEPLOYABLE="false"
    - STRIP="strip"

  # Ubuntu, g++-7
  - os: linux
    dist: trusty
    compiler: gcc
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
          - libboost1.55-all-dev
          - libssl-dev
          - g++-7
          - gcc-7
    env:
    - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - LABEL="linux-g++-7"
    - STRIP="strip"

  # Ubuntu, clang-6
  - os: linux
    dist: trusty
    compiler: clang
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-trusty-6.0
        packages:
          - libboost1.55-all-dev
          - libssl-dev
          - clang-6.0
          - libstdc++-7-dev
    env:
    - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
    - LABEL="linux-clang-6"
    - STRIP="strip"

  # Arm (aarch64) cross compile
  - os: linux
    dist: trusty
    env:
    - MATRIX_EVAL="CC=aarch64-linux-gnu-gcc && CXX=aarch64-linux-gnu-g++"
    - LABEL="aarch64"
    - _DEPLOYABLE="false"
    - STRIP="aarch64-linux-gnu-strip"

before_install:
- eval $MATRIX_EVAL

script:
- eval $MATRIX_EVAL
# If we're cross compiling aarch64, make sure our build enivornment is setup
# we do this in the script stage because this happens after the repo is cloned
- if [[ "$LABEL" == "aarch64" ]]; then source scripts/prep-aarch64.sh ; fi
- mkdir build && cd build
- cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
- make -j2
- if [[ "$LABEL" != "aarch64" ]]; then ./src/cryptotest ; fi

before_deploy:
- if [[ "${TRAVIS_TAG}" == "" ]]; then export TRAVIS_TAG=${TRAVIS_COMMIT} ; fi
- cd src
- TARGETS="QbitNetworkd miner zedwallet Q-service cryptotest wallet-api wallet-upgrader"
- ${STRIP} ${TARGETS}
- rm -rf Qbit-${TRAVIS_TAG} 
- mkdir Qbit-${TRAVIS_TAG}
- cp ${TARGETS} Qbit-${TRAVIS_TAG}/
- cp ../../LICENSE Qbit-${TRAVIS_TAG}/
- tar cvfz Qbit-${TRAVIS_TAG}-${LABEL}.tar.gz Qbit-${TRAVIS_TAG}/
- rm -rf builds
- mkdir builds
- cp Qbit-${TRAVIS_TAG}-${LABEL}.tar.gz builds
- cd ..

deploy:
  - provider: releases
    api_key:
      secure: 
    file:
      - Qbit-${TRAVIS_TAG}-${LABEL}.tar.gz
    skip_cleanup: true
    draft: true
    on:
      repo: Qbit/Qbit
      tags: true
      condition: "$_DEPLOYABLE = true"

  - provider: s3
    access_key_id:
      secure: 
    secret_access_key:
      secure: 
    bucket: olk-Qbit
    skip_cleanup: true
    region: us-east-1
    upload-dir: Qbit
    local-dir: src/builds
    on:
      repo: Qbit/Qbit
      all_branches: true
